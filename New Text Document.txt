//thingspeak
//user - xaran14096@sentrau.com
//password - Vehicleemission1
#include <ThingSpeak.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <WiFi.h>

LiquidCrystal_I2C lcd(0x3F, 16, 2);


int i = 0;
WiFiClient  client;
const char* ssid = "User";
const char* password = "Password";

#define mq2 34     //SMOKE
#define mq7 36     //CO
#define mq135 39   // GAS

const String PHONE = "+919445768682";

unsigned long previousMillis = 0;  // will store last time LED was updated

const long interval = 10000;



int MQ_2_VALUE = 0;
int MQ_7_VALUE  = 0;
int MQ_135_VALUE = 0;

// ThingSpeak settings
unsigned long myChannelNumber =   2491130;
const char *myWriteAPIKey = "R957PKHA3Q9NIXA1";

void setup()
{

  Serial.begin(115200);

  pinMode(mq2, INPUT); //GAS
  pinMode(mq7, INPUT);//RESP
  pinMode(mq135, INPUT); //ALCOHOL

  lcd.begin();
  lcd.backlight();
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Vehicle emission");
  lcd.setCursor(4, 1);
  lcd.print("Detection");
  delay(2000);

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    lcd.clear();
    lcd.setCursor(2, 0);
    lcd.print("Connecting");
    lcd.setCursor(4, 1);
    lcd.print("to WiFi");
    Serial.print("Connecting to WiFi...");
    Serial.println(ssid);
  }
  Serial.println("Connected to WiFi");
  ThingSpeak.begin(client);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("INITIALIZING..");
  delay(1000);
  Serial2.begin(9600);

  Serial2.println("AT"); //Check GSM Module
  delay(1000);
  Serial2.println("ATE1"); //Echo ON
  delay(1000);
  Serial2.println("AT+CPIN?"); //Check SIM ready
  delay(1000);
  Serial2.println("AT+CMGF=1"); //SMS text mode
  delay(1000);
  Serial2.println("AT+CNMI=1,1,0,0,0"); /// Decides how newly arrived SMS should be handled
  delay(1000);
  Serial.println( "GO");
  lcd.clear();
  lcd.setCursor(4, 0);
  lcd.print("READY");
}

void loop() {
  GASFun();
  MQ_2();
  MQ_7();

  if (MQ_2_VALUE > 300 || MQ_7_VALUE > 500 || MQ_135_VALUE > 600)
  {
    i++;
    if (i > 4)
    {
      sendAlert1();
      i = 0;
    }
  }
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Status - ");
  lcd.print(i);
  delay(1500);

  unsigned long currentMillis = millis();

  if (currentMillis - previousMillis >= interval) {
    Serial.println("IN");
    previousMillis = currentMillis;
    ThingSpeak.setField(1, MQ_2_VALUE);
    ThingSpeak.setField(2, MQ_7_VALUE);
    ThingSpeak.setField(3, MQ_135_VALUE);

    int x = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);
    if (x == 200) {
      Serial.println("Channel update successful.");
    }
    else {
      Serial.println("Problem updating channel. HTTP error code " + String(x));
    }

  }
}

void MQ_2()
{

  MQ_2_VALUE = analogRead(mq2);
  Serial.print("\t");
  Serial.print("Smoke :");
  Serial.print(MQ_2_VALUE );
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("NOx : ");
  lcd.print(MQ_2_VALUE );
  lcd.print(" ppm");
  delay(1500);
}

void MQ_7()
{
  MQ_7_VALUE = analogRead(mq7);
  Serial.print("\t");
  Serial.print("CO :");
  Serial.println(MQ_7_VALUE );
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("CO : ");
  lcd.print(MQ_7_VALUE);
  lcd.print(" ppm");
  delay(1500);
}

void GASFun() {
  MQ_135_VALUE = analogRead(mq135);
  lcd.clear();
  Serial.print("GAS STATUS  :");
  Serial.print(MQ_135_VALUE);
  lcd.setCursor(0, 0);
  lcd.print("HC :");
  lcd.print(MQ_135_VALUE);
  lcd.print(" ppm");
  delay(1500);
}

void sendAlert1()
{
  //return;
  String sms_data;
  sms_data = "EMERGENCY \r";
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("SENDING SMS...");
  //return;
  Serial2.print("AT+CMGF=1\r");
  delay(1000);
  Serial2.print("AT+CMGS=\"" + PHONE + "\"\r");
  delay(1000);
  Serial2.println("User - ASHWIN BASKARAN");
  delay(1000);
  Serial2.println("Engine No - 0987654321");
  delay(1000);
  Serial2.println("Vehicle No - TN38x1234");
  delay(1000);
  Serial2.print("NOx :");
  delay(100);
  Serial2.print(MQ_2_VALUE );
  delay(100);
  Serial2.println(" ppm");
  delay(100);
  Serial2.print("CO :");
  delay(100);
  Serial2.print(MQ_7_VALUE);
  delay(100);
  Serial2.println(" ppm");
  delay(100);
  Serial2.print("HC :");
  delay(100);
  Serial2.print(MQ_135_VALUE );
  delay(100);
  Serial2.print(" ppm");
  delay(100);
  Serial2.write(0x1A); //ascii code for ctrl-26 //sim800.println((char)26); //ascii code for ctrl-26
  delay(1000);
  Serial.println("SMS Sent Successfully.");
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("waiting.......");
  delay(5000);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("SMS SENT");
}